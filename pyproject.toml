[project]
name = "excel-sourcesense-app"
version = "0.1.0"
description = "Excel metadata extraction app built using Atlan Application SDK - SourceSense"
authors = [{ name = "Atlan App Team", email = "connect@atlan.com" }]
requires-python = ">=3.11"
license = "Apache-2.0"
readme = "README.md"
dependencies = [
    "atlan-application-sdk[daft,sqlalchemy,tests,workflows]==0.1.1rc38",
    "poethepoet",
    # Excel processing dependencies
    "pandas>=2.0.0",
    "openpyxl>=3.1.0",
    "fastapi>=0.100.0",
    "uvicorn[standard]>=0.23.0",
    "python-multipart>=0.0.6",
    "xlrd>=2.0.0",
    "numpy>=1.24.0",
    # Visualization dependencies
    "matplotlib>=3.7.0",
    "seaborn>=0.12.0",
    "plotly>=5.15.0",
    # Utility dependencies
    "python-dateutil>=2.8.0",
    "chardet>=5.0.0",  # For encoding detection
    "pathvalidate>=3.0.0",  # For file path validation
    "temporalio>=1.5.0",
]

[dependency-groups]
dev = [
    "pytest",
    "pytest-asyncio",
    "coverage",
    "pre-commit",
    "black",
    "flake8",
]

[tool.poe.tasks]
start-dapr = "dapr run --enable-api-logging --log-level debug --app-id excel-app --app-port 3000 --dapr-http-port 3500 --dapr-grpc-port 50001 --dapr-http-max-request-size 10240 --resources-path components"
start-temporal = "temporal server start-dev --db-filename ./temporal.db"
start-deps.shell = "poe start-dapr & poe start-temporal &"
stop-deps.shell = "lsof -ti:3000,3500,7233,50001 | xargs kill -9 2>/dev/null || true"

[tool.poe.tasks.download-components]
interpreter = "python"
env = { SDK_VERSION = "v0.1.1rc38" }
shell = """
import pathlib, requests, os
components_dir = pathlib.Path("components")
components_dir.mkdir(exist_ok=True)
api_url = "https://api.github.com/repos/atlanhq/application-sdk/contents/components"
response = requests.get(api_url, params={"ref": os.getenv("SDK_VERSION")})
response.raise_for_status()
for file_info in response.json():
    if file_info["type"] == "file" and file_info["name"].endswith(".yaml"):
        raw_url = file_info["download_url"]
        file_response = requests.get(raw_url)
        file_response.raise_for_status()
        file_path = components_dir / file_info["name"]
        file_path.write_text(file_response.text)
        print(f"Downloaded: {file_info['name']}")
"""

[tool.poe.tasks.create-sample-data]
interpreter = "python"
shell = """
import pandas as pd
import pathlib
import random
from datetime import datetime, timedelta

# Create sample data directory
sample_dir = pathlib.Path("sample_data")
sample_dir.mkdir(exist_ok=True)

# Sample 1: Employee data
employees = pd.DataFrame({
    'employee_id': range(1, 101),
    'name': [f'Employee {i}' for i in range(1, 101)],
    'department': random.choices(['Engineering', 'Sales', 'Marketing', 'HR', 'Finance'], k=100),
    'salary': [random.randint(40000, 120000) for _ in range(100)],
    'hire_date': [datetime.now() - timedelta(days=random.randint(30, 3650)) for _ in range(100)],
    'is_active': random.choices([True, False], weights=[85, 15], k=100)
})

# Sample 2: Sales data
sales = pd.DataFrame({
    'order_id': range(1, 501),
    'customer_name': [f'Customer {i}' for i in range(1, 501)],
    'product': random.choices(['Product A', 'Product B', 'Product C', 'Product D'], k=500),
    'quantity': [random.randint(1, 10) for _ in range(500)],
    'price': [round(random.uniform(10.0, 500.0), 2) for _ in range(500)],
    'order_date': [datetime.now() - timedelta(days=random.randint(1, 365)) for _ in range(500)]
})

# Create Excel file with multiple sheets
with pd.ExcelWriter(sample_dir / 'company_data.xlsx', engine='openpyxl') as writer:
    employees.to_excel(writer, sheet_name='Employees', index=False)
    sales.to_excel(writer, sheet_name='Sales', index=False)
    
print(f"Created sample Excel file: {sample_dir / 'company_data.xlsx'}")

# Create a CSV file as well
sales.to_csv(sample_dir / 'sales_data.csv', index=False)
print(f"Created sample CSV file: {sample_dir / 'sales_data.csv'}")
"""

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.sdist]
include = ["./**/*.py"]

[tool.hatch.build.targets.wheel]
include = ["./**/*.py"]
packages = [
    "app"
]

# for local development
[tool.uv.sources]
# atlan-application-sdk = { path = "../application-sdk", editable = true }
# atlan-application-sdk = { git = "https://github.com/atlanhq/application-sdk", rev = "349e45a1ee273315a4474f645332e2ef4c8569a9" }
